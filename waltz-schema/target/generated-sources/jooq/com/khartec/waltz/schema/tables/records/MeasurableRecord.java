/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables.records;


import com.khartec.waltz.schema.tables.Measurable;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurableRecord extends UpdatableRecordImpl<MeasurableRecord> implements Record11<Long, Long, String, Long, Boolean, String, String, Timestamp, String, String, String> {

    private static final long serialVersionUID = -934537987;

    /**
     * Setter for <code>measurable.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>measurable.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>measurable.parent_id</code>.
     */
    public void setParentId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>measurable.parent_id</code>.
     */
    public Long getParentId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>measurable.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>measurable.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>measurable.measurable_category_id</code>.
     */
    public void setMeasurableCategoryId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>measurable.measurable_category_id</code>.
     */
    public Long getMeasurableCategoryId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>measurable.concrete</code>.
     */
    public void setConcrete(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>measurable.concrete</code>.
     */
    public Boolean getConcrete() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>measurable.description</code>.
     */
    public void setDescription(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>measurable.description</code>.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>measurable.external_id</code>.
     */
    public void setExternalId(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>measurable.external_id</code>.
     */
    public String getExternalId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>measurable.last_updated_at</code>.
     */
    public void setLastUpdatedAt(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>measurable.last_updated_at</code>.
     */
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>measurable.last_updated_by</code>.
     */
    public void setLastUpdatedBy(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>measurable.last_updated_by</code>.
     */
    public String getLastUpdatedBy() {
        return (String) get(8);
    }

    /**
     * Setter for <code>measurable.provenance</code>.
     */
    public void setProvenance(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>measurable.provenance</code>.
     */
    public String getProvenance() {
        return (String) get(9);
    }

    /**
     * Setter for <code>measurable.external_parent_id</code>.
     */
    public void setExternalParentId(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>measurable.external_parent_id</code>.
     */
    public String getExternalParentId() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<Long, Long, String, Long, Boolean, String, String, Timestamp, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<Long, Long, String, Long, Boolean, String, String, Timestamp, String, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Measurable.MEASURABLE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return Measurable.MEASURABLE.PARENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Measurable.MEASURABLE.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return Measurable.MEASURABLE.MEASURABLE_CATEGORY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return Measurable.MEASURABLE.CONCRETE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Measurable.MEASURABLE.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Measurable.MEASURABLE.EXTERNAL_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field8() {
        return Measurable.MEASURABLE.LAST_UPDATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return Measurable.MEASURABLE.LAST_UPDATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return Measurable.MEASURABLE.PROVENANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return Measurable.MEASURABLE.EXTERNAL_PARENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getMeasurableCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component5() {
        return getConcrete();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component7() {
        return getExternalId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component8() {
        return getLastUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getLastUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getProvenance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return getExternalParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getMeasurableCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getConcrete();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getExternalId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value8() {
        return getLastUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getLastUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getProvenance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getExternalParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value2(Long value) {
        setParentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value4(Long value) {
        setMeasurableCategoryId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value5(Boolean value) {
        setConcrete(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value6(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value7(String value) {
        setExternalId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value8(Timestamp value) {
        setLastUpdatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value9(String value) {
        setLastUpdatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value10(String value) {
        setProvenance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord value11(String value) {
        setExternalParentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurableRecord values(Long value1, Long value2, String value3, Long value4, Boolean value5, String value6, String value7, Timestamp value8, String value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurableRecord
     */
    public MeasurableRecord() {
        super(Measurable.MEASURABLE);
    }

    /**
     * Create a detached, initialised MeasurableRecord
     */
    public MeasurableRecord(Long id, Long parentId, String name, Long measurableCategoryId, Boolean concrete, String description, String externalId, Timestamp lastUpdatedAt, String lastUpdatedBy, String provenance, String externalParentId) {
        super(Measurable.MEASURABLE);

        set(0, id);
        set(1, parentId);
        set(2, name);
        set(3, measurableCategoryId);
        set(4, concrete);
        set(5, description);
        set(6, externalId);
        set(7, lastUpdatedAt);
        set(8, lastUpdatedBy);
        set(9, provenance);
        set(10, externalParentId);
    }
}
