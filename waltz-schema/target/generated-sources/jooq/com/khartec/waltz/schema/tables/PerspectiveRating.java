/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.PerspectiveRatingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerspectiveRating extends TableImpl<PerspectiveRatingRecord> {

    private static final long serialVersionUID = -404414333;

    /**
     * The reference instance of <code>perspective_rating</code>
     */
    public static final PerspectiveRating PERSPECTIVE_RATING = new PerspectiveRating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerspectiveRatingRecord> getRecordType() {
        return PerspectiveRatingRecord.class;
    }

    /**
     * The column <code>perspective_rating.entity_kind</code>.
     */
    public final TableField<PerspectiveRatingRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>perspective_rating.entity_id</code>.
     */
    public final TableField<PerspectiveRatingRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>perspective_rating.rating</code>.
     */
    public final TableField<PerspectiveRatingRecord, String> RATING = createField("rating", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>perspective_rating.last_updated_at</code>.
     */
    public final TableField<PerspectiveRatingRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>perspective_rating.last_updated_by</code>.
     */
    public final TableField<PerspectiveRatingRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>perspective_rating.measurable_x</code>.
     */
    public final TableField<PerspectiveRatingRecord, Long> MEASURABLE_X = createField("measurable_x", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>perspective_rating.measurable_y</code>.
     */
    public final TableField<PerspectiveRatingRecord, Long> MEASURABLE_Y = createField("measurable_y", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>perspective_rating</code> table reference
     */
    public PerspectiveRating() {
        this(DSL.name("perspective_rating"), null);
    }

    /**
     * Create an aliased <code>perspective_rating</code> table reference
     */
    public PerspectiveRating(String alias) {
        this(DSL.name(alias), PERSPECTIVE_RATING);
    }

    /**
     * Create an aliased <code>perspective_rating</code> table reference
     */
    public PerspectiveRating(Name alias) {
        this(alias, PERSPECTIVE_RATING);
    }

    private PerspectiveRating(Name alias, Table<PerspectiveRatingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PerspectiveRating(Name alias, Table<PerspectiveRatingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSPECTIVE_RATING_IDX_ENTITY_REF, Indexes.PERSPECTIVE_RATING_IDX_MEASURABLE_X, Indexes.PERSPECTIVE_RATING_IDX_MEASURABLE_Y, Indexes.PERSPECTIVE_RATING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PerspectiveRatingRecord> getPrimaryKey() {
        return Keys.KEY_PERSPECTIVE_RATING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PerspectiveRatingRecord>> getKeys() {
        return Arrays.<UniqueKey<PerspectiveRatingRecord>>asList(Keys.KEY_PERSPECTIVE_RATING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerspectiveRating as(String alias) {
        return new PerspectiveRating(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerspectiveRating as(Name alias) {
        return new PerspectiveRating(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerspectiveRating rename(String name) {
        return new PerspectiveRating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerspectiveRating rename(Name name) {
        return new PerspectiveRating(name, null);
    }
}
