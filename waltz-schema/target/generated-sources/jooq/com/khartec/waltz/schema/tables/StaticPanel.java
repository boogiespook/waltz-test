/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.StaticPanelRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaticPanel extends TableImpl<StaticPanelRecord> {

    private static final long serialVersionUID = -417336036;

    /**
     * The reference instance of <code>static_panel</code>
     */
    public static final StaticPanel STATIC_PANEL = new StaticPanel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaticPanelRecord> getRecordType() {
        return StaticPanelRecord.class;
    }

    /**
     * The column <code>static_panel.id</code>.
     */
    public final TableField<StaticPanelRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>static_panel.group</code>.
     */
    public final TableField<StaticPanelRecord, String> GROUP = createField("group", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>static_panel.title</code>.
     */
    public final TableField<StaticPanelRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>static_panel.icon</code>.
     */
    public final TableField<StaticPanelRecord, String> ICON = createField("icon", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'info'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>static_panel.priority</code>.
     */
    public final TableField<StaticPanelRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>static_panel.width</code>.
     */
    public final TableField<StaticPanelRecord, Integer> WIDTH = createField("width", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("12", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>static_panel.encoding</code>.
     */
    public final TableField<StaticPanelRecord, String> ENCODING = createField("encoding", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>static_panel.content</code>.
     */
    public final TableField<StaticPanelRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>static_panel</code> table reference
     */
    public StaticPanel() {
        this(DSL.name("static_panel"), null);
    }

    /**
     * Create an aliased <code>static_panel</code> table reference
     */
    public StaticPanel(String alias) {
        this(DSL.name(alias), STATIC_PANEL);
    }

    /**
     * Create an aliased <code>static_panel</code> table reference
     */
    public StaticPanel(Name alias) {
        this(alias, STATIC_PANEL);
    }

    private StaticPanel(Name alias, Table<StaticPanelRecord> aliased) {
        this(alias, aliased, null);
    }

    private StaticPanel(Name alias, Table<StaticPanelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATIC_PANEL_IDX_STATIC_PANEL_GROUP, Indexes.STATIC_PANEL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StaticPanelRecord, Long> getIdentity() {
        return Keys.IDENTITY_STATIC_PANEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StaticPanelRecord> getPrimaryKey() {
        return Keys.KEY_STATIC_PANEL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StaticPanelRecord>> getKeys() {
        return Arrays.<UniqueKey<StaticPanelRecord>>asList(Keys.KEY_STATIC_PANEL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticPanel as(String alias) {
        return new StaticPanel(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticPanel as(Name alias) {
        return new StaticPanel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StaticPanel rename(String name) {
        return new StaticPanel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaticPanel rename(Name name) {
        return new StaticPanel(name, null);
    }
}
