/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.SvgDiagramRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SvgDiagram extends TableImpl<SvgDiagramRecord> {

    private static final long serialVersionUID = 1741152603;

    /**
     * The reference instance of <code>svg_diagram</code>
     */
    public static final SvgDiagram SVG_DIAGRAM = new SvgDiagram();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SvgDiagramRecord> getRecordType() {
        return SvgDiagramRecord.class;
    }

    /**
     * The column <code>svg_diagram.id</code>.
     */
    public final TableField<SvgDiagramRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>svg_diagram.name</code>.
     */
    public final TableField<SvgDiagramRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>svg_diagram.group</code>.
     */
    public final TableField<SvgDiagramRecord, String> GROUP = createField("group", org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>svg_diagram.priority</code>.
     */
    public final TableField<SvgDiagramRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>svg_diagram.description</code>.
     */
    public final TableField<SvgDiagramRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>svg_diagram.svg</code>.
     */
    public final TableField<SvgDiagramRecord, String> SVG = createField("svg", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>svg_diagram.key_property</code>.
     */
    public final TableField<SvgDiagramRecord, String> KEY_PROPERTY = createField("key_property", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>svg_diagram.product</code>.
     */
    public final TableField<SvgDiagramRecord, String> PRODUCT = createField("product", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>svg_diagram</code> table reference
     */
    public SvgDiagram() {
        this(DSL.name("svg_diagram"), null);
    }

    /**
     * Create an aliased <code>svg_diagram</code> table reference
     */
    public SvgDiagram(String alias) {
        this(DSL.name(alias), SVG_DIAGRAM);
    }

    /**
     * Create an aliased <code>svg_diagram</code> table reference
     */
    public SvgDiagram(Name alias) {
        this(alias, SVG_DIAGRAM);
    }

    private SvgDiagram(Name alias, Table<SvgDiagramRecord> aliased) {
        this(alias, aliased, null);
    }

    private SvgDiagram(Name alias, Table<SvgDiagramRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SVG_DIAGRAM_IDX_SVG_DIAGRAM_GROUP, Indexes.SVG_DIAGRAM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SvgDiagramRecord, Long> getIdentity() {
        return Keys.IDENTITY_SVG_DIAGRAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SvgDiagramRecord> getPrimaryKey() {
        return Keys.KEY_SVG_DIAGRAM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SvgDiagramRecord>> getKeys() {
        return Arrays.<UniqueKey<SvgDiagramRecord>>asList(Keys.KEY_SVG_DIAGRAM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SvgDiagram as(String alias) {
        return new SvgDiagram(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SvgDiagram as(Name alias) {
        return new SvgDiagram(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SvgDiagram rename(String name) {
        return new SvgDiagram(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SvgDiagram rename(Name name) {
        return new SvgDiagram(name, null);
    }
}
