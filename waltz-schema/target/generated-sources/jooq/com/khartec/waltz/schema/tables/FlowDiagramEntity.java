/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.FlowDiagramEntityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A Bill of Materials (BoM) for a flow diagram
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlowDiagramEntity extends TableImpl<FlowDiagramEntityRecord> {

    private static final long serialVersionUID = -1235893651;

    /**
     * The reference instance of <code>flow_diagram_entity</code>
     */
    public static final FlowDiagramEntity FLOW_DIAGRAM_ENTITY = new FlowDiagramEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlowDiagramEntityRecord> getRecordType() {
        return FlowDiagramEntityRecord.class;
    }

    /**
     * The column <code>flow_diagram_entity.diagram_id</code>.
     */
    public final TableField<FlowDiagramEntityRecord, Long> DIAGRAM_ID = createField("diagram_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>flow_diagram_entity.entity_id</code>.
     */
    public final TableField<FlowDiagramEntityRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>flow_diagram_entity.entity_kind</code>.
     */
    public final TableField<FlowDiagramEntityRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>flow_diagram_entity.is_notable</code>.
     */
    public final TableField<FlowDiagramEntityRecord, Boolean> IS_NOTABLE = createField("is_notable", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>flow_diagram_entity</code> table reference
     */
    public FlowDiagramEntity() {
        this(DSL.name("flow_diagram_entity"), null);
    }

    /**
     * Create an aliased <code>flow_diagram_entity</code> table reference
     */
    public FlowDiagramEntity(String alias) {
        this(DSL.name(alias), FLOW_DIAGRAM_ENTITY);
    }

    /**
     * Create an aliased <code>flow_diagram_entity</code> table reference
     */
    public FlowDiagramEntity(Name alias) {
        this(alias, FLOW_DIAGRAM_ENTITY);
    }

    private FlowDiagramEntity(Name alias, Table<FlowDiagramEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private FlowDiagramEntity(Name alias, Table<FlowDiagramEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "A Bill of Materials (BoM) for a flow diagram");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLOW_DIAGRAM_ENTITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FlowDiagramEntityRecord> getPrimaryKey() {
        return Keys.KEY_FLOW_DIAGRAM_ENTITY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FlowDiagramEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<FlowDiagramEntityRecord>>asList(Keys.KEY_FLOW_DIAGRAM_ENTITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntity as(String alias) {
        return new FlowDiagramEntity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntity as(Name alias) {
        return new FlowDiagramEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowDiagramEntity rename(String name) {
        return new FlowDiagramEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowDiagramEntity rename(Name name) {
        return new FlowDiagramEntity(name, null);
    }
}
