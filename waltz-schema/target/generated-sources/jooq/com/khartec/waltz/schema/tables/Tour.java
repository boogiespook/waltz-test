/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.TourRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tour extends TableImpl<TourRecord> {

    private static final long serialVersionUID = -1400570796;

    /**
     * The reference instance of <code>tour</code>
     */
    public static final Tour TOUR = new Tour();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TourRecord> getRecordType() {
        return TourRecord.class;
    }

    /**
     * The column <code>tour.tour_key</code>.
     */
    public final TableField<TourRecord, String> TOUR_KEY = createField("tour_key", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>tour.step_id</code>.
     */
    public final TableField<TourRecord, Integer> STEP_ID = createField("step_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tour.selector</code>.
     */
    public final TableField<TourRecord, String> SELECTOR = createField("selector", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>tour.position</code>.
     */
    public final TableField<TourRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.field("'top'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tour.description</code>.
     */
    public final TableField<TourRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * Create a <code>tour</code> table reference
     */
    public Tour() {
        this(DSL.name("tour"), null);
    }

    /**
     * Create an aliased <code>tour</code> table reference
     */
    public Tour(String alias) {
        this(DSL.name(alias), TOUR);
    }

    /**
     * Create an aliased <code>tour</code> table reference
     */
    public Tour(Name alias) {
        this(alias, TOUR);
    }

    private Tour(Name alias, Table<TourRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tour(Name alias, Table<TourRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOUR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TourRecord> getPrimaryKey() {
        return Keys.KEY_TOUR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TourRecord>> getKeys() {
        return Arrays.<UniqueKey<TourRecord>>asList(Keys.KEY_TOUR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tour as(String alias) {
        return new Tour(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tour as(Name alias) {
        return new Tour(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tour rename(String name) {
        return new Tour(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tour rename(Name name) {
        return new Tour(name, null);
    }
}
