/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.EntityNamedNoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Named notes associated with entities
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityNamedNote extends TableImpl<EntityNamedNoteRecord> {

    private static final long serialVersionUID = -697632058;

    /**
     * The reference instance of <code>entity_named_note</code>
     */
    public static final EntityNamedNote ENTITY_NAMED_NOTE = new EntityNamedNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityNamedNoteRecord> getRecordType() {
        return EntityNamedNoteRecord.class;
    }

    /**
     * The column <code>entity_named_note.entity_id</code>.
     */
    public final TableField<EntityNamedNoteRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>entity_named_note.entity_kind</code>.
     */
    public final TableField<EntityNamedNoteRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>entity_named_note.named_note_type_id</code>.
     */
    public final TableField<EntityNamedNoteRecord, Long> NAMED_NOTE_TYPE_ID = createField("named_note_type_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>entity_named_note.note_text</code>.
     */
    public final TableField<EntityNamedNoteRecord, String> NOTE_TEXT = createField("note_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>entity_named_note.provenance</code>.
     */
    public final TableField<EntityNamedNoteRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>entity_named_note.last_updated_at</code>.
     */
    public final TableField<EntityNamedNoteRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>entity_named_note.last_updated_by</code>.
     */
    public final TableField<EntityNamedNoteRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>entity_named_note</code> table reference
     */
    public EntityNamedNote() {
        this(DSL.name("entity_named_note"), null);
    }

    /**
     * Create an aliased <code>entity_named_note</code> table reference
     */
    public EntityNamedNote(String alias) {
        this(DSL.name(alias), ENTITY_NAMED_NOTE);
    }

    /**
     * Create an aliased <code>entity_named_note</code> table reference
     */
    public EntityNamedNote(Name alias) {
        this(alias, ENTITY_NAMED_NOTE);
    }

    private EntityNamedNote(Name alias, Table<EntityNamedNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityNamedNote(Name alias, Table<EntityNamedNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Named notes associated with entities");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTITY_NAMED_NOTE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntityNamedNoteRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_NAMED_NOTE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntityNamedNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityNamedNoteRecord>>asList(Keys.KEY_ENTITY_NAMED_NOTE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityNamedNote as(String alias) {
        return new EntityNamedNote(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityNamedNote as(Name alias) {
        return new EntityNamedNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityNamedNote rename(String name) {
        return new EntityNamedNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityNamedNote rename(Name name) {
        return new EntityNamedNote(name, null);
    }
}
