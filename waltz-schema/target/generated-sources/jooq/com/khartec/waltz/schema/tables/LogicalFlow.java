/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.LogicalFlowRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogicalFlow extends TableImpl<LogicalFlowRecord> {

    private static final long serialVersionUID = -1356762150;

    /**
     * The reference instance of <code>logical_flow</code>
     */
    public static final LogicalFlow LOGICAL_FLOW = new LogicalFlow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogicalFlowRecord> getRecordType() {
        return LogicalFlowRecord.class;
    }

    /**
     * The column <code>logical_flow.source_entity_kind</code>.
     */
    public final TableField<LogicalFlowRecord, String> SOURCE_ENTITY_KIND = createField("source_entity_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>logical_flow.source_entity_id</code>.
     */
    public final TableField<LogicalFlowRecord, Long> SOURCE_ENTITY_ID = createField("source_entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>logical_flow.target_entity_kind</code>.
     */
    public final TableField<LogicalFlowRecord, String> TARGET_ENTITY_KIND = createField("target_entity_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>logical_flow.target_entity_id</code>.
     */
    public final TableField<LogicalFlowRecord, Long> TARGET_ENTITY_ID = createField("target_entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>logical_flow.provenance</code>.
     */
    public final TableField<LogicalFlowRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>logical_flow.id</code>.
     */
    public final TableField<LogicalFlowRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>logical_flow.last_updated_at</code>.
     */
    public final TableField<LogicalFlowRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>logical_flow.last_updated_by</code>.
     */
    public final TableField<LogicalFlowRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>logical_flow.is_removed</code>.
     */
    public final TableField<LogicalFlowRecord, Boolean> IS_REMOVED = createField("is_removed", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>logical_flow.last_attested_at</code>.
     */
    public final TableField<LogicalFlowRecord, Timestamp> LAST_ATTESTED_AT = createField("last_attested_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>logical_flow.last_attested_by</code>.
     */
    public final TableField<LogicalFlowRecord, String> LAST_ATTESTED_BY = createField("last_attested_by", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>logical_flow.entity_lifecycle_status</code>.
     */
    public final TableField<LogicalFlowRecord, String> ENTITY_LIFECYCLE_STATUS = createField("entity_lifecycle_status", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>logical_flow</code> table reference
     */
    public LogicalFlow() {
        this(DSL.name("logical_flow"), null);
    }

    /**
     * Create an aliased <code>logical_flow</code> table reference
     */
    public LogicalFlow(String alias) {
        this(DSL.name(alias), LOGICAL_FLOW);
    }

    /**
     * Create an aliased <code>logical_flow</code> table reference
     */
    public LogicalFlow(Name alias) {
        this(alias, LOGICAL_FLOW);
    }

    private LogicalFlow(Name alias, Table<LogicalFlowRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogicalFlow(Name alias, Table<LogicalFlowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGICAL_FLOW_PRIMARY, Indexes.LOGICAL_FLOW_UNIQUE_LOGICAL_FLOW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogicalFlowRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOGICAL_FLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogicalFlowRecord> getPrimaryKey() {
        return Keys.KEY_LOGICAL_FLOW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogicalFlowRecord>> getKeys() {
        return Arrays.<UniqueKey<LogicalFlowRecord>>asList(Keys.KEY_LOGICAL_FLOW_UNIQUE_LOGICAL_FLOW, Keys.KEY_LOGICAL_FLOW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalFlow as(String alias) {
        return new LogicalFlow(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalFlow as(Name alias) {
        return new LogicalFlow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogicalFlow rename(String name) {
        return new LogicalFlow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogicalFlow rename(Name name) {
        return new LogicalFlow(name, null);
    }
}
