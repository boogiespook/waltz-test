/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.FlowDiagramAnnotationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Annotations associated with a specific flow diagram
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlowDiagramAnnotation extends TableImpl<FlowDiagramAnnotationRecord> {

    private static final long serialVersionUID = 198459157;

    /**
     * The reference instance of <code>flow_diagram_annotation</code>
     */
    public static final FlowDiagramAnnotation FLOW_DIAGRAM_ANNOTATION = new FlowDiagramAnnotation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlowDiagramAnnotationRecord> getRecordType() {
        return FlowDiagramAnnotationRecord.class;
    }

    /**
     * The column <code>flow_diagram_annotation.annotation_id</code>.
     */
    public final TableField<FlowDiagramAnnotationRecord, String> ANNOTATION_ID = createField("annotation_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>flow_diagram_annotation.diagram_id</code>.
     */
    public final TableField<FlowDiagramAnnotationRecord, Long> DIAGRAM_ID = createField("diagram_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>flow_diagram_annotation.entity_id</code>.
     */
    public final TableField<FlowDiagramAnnotationRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>flow_diagram_annotation.entity_kind</code>.
     */
    public final TableField<FlowDiagramAnnotationRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>flow_diagram_annotation.note</code>.
     */
    public final TableField<FlowDiagramAnnotationRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>flow_diagram_annotation</code> table reference
     */
    public FlowDiagramAnnotation() {
        this(DSL.name("flow_diagram_annotation"), null);
    }

    /**
     * Create an aliased <code>flow_diagram_annotation</code> table reference
     */
    public FlowDiagramAnnotation(String alias) {
        this(DSL.name(alias), FLOW_DIAGRAM_ANNOTATION);
    }

    /**
     * Create an aliased <code>flow_diagram_annotation</code> table reference
     */
    public FlowDiagramAnnotation(Name alias) {
        this(alias, FLOW_DIAGRAM_ANNOTATION);
    }

    private FlowDiagramAnnotation(Name alias, Table<FlowDiagramAnnotationRecord> aliased) {
        this(alias, aliased, null);
    }

    private FlowDiagramAnnotation(Name alias, Table<FlowDiagramAnnotationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Annotations associated with a specific flow diagram");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLOW_DIAGRAM_ANNOTATION_IDX_FDA_DIAGRAM_ID, Indexes.FLOW_DIAGRAM_ANNOTATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FlowDiagramAnnotationRecord> getPrimaryKey() {
        return Keys.KEY_FLOW_DIAGRAM_ANNOTATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FlowDiagramAnnotationRecord>> getKeys() {
        return Arrays.<UniqueKey<FlowDiagramAnnotationRecord>>asList(Keys.KEY_FLOW_DIAGRAM_ANNOTATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramAnnotation as(String alias) {
        return new FlowDiagramAnnotation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramAnnotation as(Name alias) {
        return new FlowDiagramAnnotation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowDiagramAnnotation rename(String name) {
        return new FlowDiagramAnnotation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowDiagramAnnotation rename(Name name) {
        return new FlowDiagramAnnotation(name, null);
    }
}
