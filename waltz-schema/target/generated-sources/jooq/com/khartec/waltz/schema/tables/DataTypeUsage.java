/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.DataTypeUsageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataTypeUsage extends TableImpl<DataTypeUsageRecord> {

    private static final long serialVersionUID = 290518178;

    /**
     * The reference instance of <code>data_type_usage</code>
     */
    public static final DataTypeUsage DATA_TYPE_USAGE = new DataTypeUsage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataTypeUsageRecord> getRecordType() {
        return DataTypeUsageRecord.class;
    }

    /**
     * The column <code>data_type_usage.entity_kind</code>.
     */
    public final TableField<DataTypeUsageRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>data_type_usage.entity_id</code>.
     */
    public final TableField<DataTypeUsageRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>data_type_usage.usage_kind</code>.
     */
    public final TableField<DataTypeUsageRecord, String> USAGE_KIND = createField("usage_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>data_type_usage.description</code>.
     */
    public final TableField<DataTypeUsageRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(2048).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>data_type_usage.provenance</code>.
     */
    public final TableField<DataTypeUsageRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>data_type_usage.is_selected</code>.
     */
    public final TableField<DataTypeUsageRecord, Boolean> IS_SELECTED = createField("is_selected", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>data_type_usage.data_type_id</code>.
     */
    public final TableField<DataTypeUsageRecord, Long> DATA_TYPE_ID = createField("data_type_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>data_type_usage</code> table reference
     */
    public DataTypeUsage() {
        this(DSL.name("data_type_usage"), null);
    }

    /**
     * Create an aliased <code>data_type_usage</code> table reference
     */
    public DataTypeUsage(String alias) {
        this(DSL.name(alias), DATA_TYPE_USAGE);
    }

    /**
     * Create an aliased <code>data_type_usage</code> table reference
     */
    public DataTypeUsage(Name alias) {
        this(alias, DATA_TYPE_USAGE);
    }

    private DataTypeUsage(Name alias, Table<DataTypeUsageRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataTypeUsage(Name alias, Table<DataTypeUsageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_TYPE_USAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataTypeUsageRecord> getPrimaryKey() {
        return Keys.KEY_DATA_TYPE_USAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataTypeUsageRecord>> getKeys() {
        return Arrays.<UniqueKey<DataTypeUsageRecord>>asList(Keys.KEY_DATA_TYPE_USAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataTypeUsage as(String alias) {
        return new DataTypeUsage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataTypeUsage as(Name alias) {
        return new DataTypeUsage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTypeUsage rename(String name) {
        return new DataTypeUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTypeUsage rename(Name name) {
        return new DataTypeUsage(name, null);
    }
}
