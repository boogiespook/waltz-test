/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.EntityNamedNoteTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Named note types that can associated with entities
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityNamedNoteType extends TableImpl<EntityNamedNoteTypeRecord> {

    private static final long serialVersionUID = -1099293805;

    /**
     * The reference instance of <code>entity_named_note_type</code>
     */
    public static final EntityNamedNoteType ENTITY_NAMED_NOTE_TYPE = new EntityNamedNoteType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityNamedNoteTypeRecord> getRecordType() {
        return EntityNamedNoteTypeRecord.class;
    }

    /**
     * The column <code>entity_named_note_type.id</code>.
     */
    public final TableField<EntityNamedNoteTypeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>entity_named_note_type.applicable_entity_kinds</code>.
     */
    public final TableField<EntityNamedNoteTypeRecord, String> APPLICABLE_ENTITY_KINDS = createField("applicable_entity_kinds", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>entity_named_note_type.name</code>.
     */
    public final TableField<EntityNamedNoteTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>entity_named_note_type.description</code>.
     */
    public final TableField<EntityNamedNoteTypeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>entity_named_note_type.is_readonly</code>.
     */
    public final TableField<EntityNamedNoteTypeRecord, Boolean> IS_READONLY = createField("is_readonly", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>entity_named_note_type</code> table reference
     */
    public EntityNamedNoteType() {
        this(DSL.name("entity_named_note_type"), null);
    }

    /**
     * Create an aliased <code>entity_named_note_type</code> table reference
     */
    public EntityNamedNoteType(String alias) {
        this(DSL.name(alias), ENTITY_NAMED_NOTE_TYPE);
    }

    /**
     * Create an aliased <code>entity_named_note_type</code> table reference
     */
    public EntityNamedNoteType(Name alias) {
        this(alias, ENTITY_NAMED_NOTE_TYPE);
    }

    private EntityNamedNoteType(Name alias, Table<EntityNamedNoteTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityNamedNoteType(Name alias, Table<EntityNamedNoteTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Named note types that can associated with entities");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTITY_NAMED_NOTE_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EntityNamedNoteTypeRecord, Long> getIdentity() {
        return Keys.IDENTITY_ENTITY_NAMED_NOTE_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntityNamedNoteTypeRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_NAMED_NOTE_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntityNamedNoteTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityNamedNoteTypeRecord>>asList(Keys.KEY_ENTITY_NAMED_NOTE_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityNamedNoteType as(String alias) {
        return new EntityNamedNoteType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityNamedNoteType as(Name alias) {
        return new EntityNamedNoteType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityNamedNoteType rename(String name) {
        return new EntityNamedNoteType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityNamedNoteType rename(Name name) {
        return new EntityNamedNoteType(name, null);
    }
}
