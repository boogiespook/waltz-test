/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.DrillGridDefinitionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Settings for drill grids, kind may be either measurable category or data 
 * type
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DrillGridDefinition extends TableImpl<DrillGridDefinitionRecord> {

    private static final long serialVersionUID = -976119507;

    /**
     * The reference instance of <code>drill_grid_definition</code>
     */
    public static final DrillGridDefinition DRILL_GRID_DEFINITION = new DrillGridDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DrillGridDefinitionRecord> getRecordType() {
        return DrillGridDefinitionRecord.class;
    }

    /**
     * The column <code>drill_grid_definition.id</code>.
     */
    public final TableField<DrillGridDefinitionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>drill_grid_definition.name</code>.
     */
    public final TableField<DrillGridDefinitionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>drill_grid_definition.x_entity_kind</code>.
     */
    public final TableField<DrillGridDefinitionRecord, String> X_ENTITY_KIND = createField("x_entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>drill_grid_definition.x_entity_id</code>.
     */
    public final TableField<DrillGridDefinitionRecord, Long> X_ENTITY_ID = createField("x_entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>drill_grid_definition.y_entity_kind</code>.
     */
    public final TableField<DrillGridDefinitionRecord, String> Y_ENTITY_KIND = createField("y_entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>drill_grid_definition.y_entity_id</code>.
     */
    public final TableField<DrillGridDefinitionRecord, Long> Y_ENTITY_ID = createField("y_entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>drill_grid_definition.description</code>.
     */
    public final TableField<DrillGridDefinitionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>drill_grid_definition</code> table reference
     */
    public DrillGridDefinition() {
        this(DSL.name("drill_grid_definition"), null);
    }

    /**
     * Create an aliased <code>drill_grid_definition</code> table reference
     */
    public DrillGridDefinition(String alias) {
        this(DSL.name(alias), DRILL_GRID_DEFINITION);
    }

    /**
     * Create an aliased <code>drill_grid_definition</code> table reference
     */
    public DrillGridDefinition(Name alias) {
        this(alias, DRILL_GRID_DEFINITION);
    }

    private DrillGridDefinition(Name alias, Table<DrillGridDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DrillGridDefinition(Name alias, Table<DrillGridDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Settings for drill grids, kind may be either measurable category or data type");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DRILL_GRID_DEFINITION_IDX_DRILL_GRID_DEFN_UNIQUE, Indexes.DRILL_GRID_DEFINITION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DrillGridDefinitionRecord, Long> getIdentity() {
        return Keys.IDENTITY_DRILL_GRID_DEFINITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DrillGridDefinitionRecord> getPrimaryKey() {
        return Keys.KEY_DRILL_GRID_DEFINITION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DrillGridDefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<DrillGridDefinitionRecord>>asList(Keys.KEY_DRILL_GRID_DEFINITION_PRIMARY, Keys.KEY_DRILL_GRID_DEFINITION_IDX_DRILL_GRID_DEFN_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DrillGridDefinition as(String alias) {
        return new DrillGridDefinition(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DrillGridDefinition as(Name alias) {
        return new DrillGridDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DrillGridDefinition rename(String name) {
        return new DrillGridDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DrillGridDefinition rename(Name name) {
        return new DrillGridDefinition(name, null);
    }
}
