/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables.records;


import com.khartec.waltz.schema.tables.FlowDiagramEntity;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A Bill of Materials (BoM) for a flow diagram
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlowDiagramEntityRecord extends UpdatableRecordImpl<FlowDiagramEntityRecord> implements Record4<Long, Long, String, Boolean> {

    private static final long serialVersionUID = 1381562811;

    /**
     * Setter for <code>flow_diagram_entity.diagram_id</code>.
     */
    public void setDiagramId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>flow_diagram_entity.diagram_id</code>.
     */
    public Long getDiagramId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>flow_diagram_entity.entity_id</code>.
     */
    public void setEntityId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>flow_diagram_entity.entity_id</code>.
     */
    public Long getEntityId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>flow_diagram_entity.entity_kind</code>.
     */
    public void setEntityKind(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>flow_diagram_entity.entity_kind</code>.
     */
    public String getEntityKind() {
        return (String) get(2);
    }

    /**
     * Setter for <code>flow_diagram_entity.is_notable</code>.
     */
    public void setIsNotable(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>flow_diagram_entity.is_notable</code>.
     */
    public Boolean getIsNotable() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record3<Long, Long, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Long, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Long, String, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return FlowDiagramEntity.FLOW_DIAGRAM_ENTITY.DIAGRAM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return FlowDiagramEntity.FLOW_DIAGRAM_ENTITY.ENTITY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return FlowDiagramEntity.FLOW_DIAGRAM_ENTITY.ENTITY_KIND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return FlowDiagramEntity.FLOW_DIAGRAM_ENTITY.IS_NOTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getDiagramId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getEntityId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getEntityKind();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component4() {
        return getIsNotable();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getDiagramId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getEntityId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getEntityKind();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getIsNotable();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntityRecord value1(Long value) {
        setDiagramId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntityRecord value2(Long value) {
        setEntityId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntityRecord value3(String value) {
        setEntityKind(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntityRecord value4(Boolean value) {
        setIsNotable(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowDiagramEntityRecord values(Long value1, Long value2, String value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlowDiagramEntityRecord
     */
    public FlowDiagramEntityRecord() {
        super(FlowDiagramEntity.FLOW_DIAGRAM_ENTITY);
    }

    /**
     * Create a detached, initialised FlowDiagramEntityRecord
     */
    public FlowDiagramEntityRecord(Long diagramId, Long entityId, String entityKind, Boolean isNotable) {
        super(FlowDiagramEntity.FLOW_DIAGRAM_ENTITY);

        set(0, diagramId);
        set(1, entityId);
        set(2, entityKind);
        set(3, isNotable);
    }
}
