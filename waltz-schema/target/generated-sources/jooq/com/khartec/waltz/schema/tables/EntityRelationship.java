/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.EntityRelationshipRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityRelationship extends TableImpl<EntityRelationshipRecord> {

    private static final long serialVersionUID = 1397906331;

    /**
     * The reference instance of <code>entity_relationship</code>
     */
    public static final EntityRelationship ENTITY_RELATIONSHIP = new EntityRelationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityRelationshipRecord> getRecordType() {
        return EntityRelationshipRecord.class;
    }

    /**
     * The column <code>entity_relationship.kind_a</code>.
     */
    public final TableField<EntityRelationshipRecord, String> KIND_A = createField("kind_a", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>entity_relationship.id_a</code>.
     */
    public final TableField<EntityRelationshipRecord, Long> ID_A = createField("id_a", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>entity_relationship.kind_b</code>.
     */
    public final TableField<EntityRelationshipRecord, String> KIND_B = createField("kind_b", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>entity_relationship.id_b</code>.
     */
    public final TableField<EntityRelationshipRecord, Long> ID_B = createField("id_b", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>entity_relationship.relationship</code>.
     */
    public final TableField<EntityRelationshipRecord, String> RELATIONSHIP = createField("relationship", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>entity_relationship.provenance</code>.
     */
    public final TableField<EntityRelationshipRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>entity_relationship.description</code>.
     */
    public final TableField<EntityRelationshipRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>entity_relationship.last_updated_at</code>.
     */
    public final TableField<EntityRelationshipRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>entity_relationship.last_updated_by</code>.
     */
    public final TableField<EntityRelationshipRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'admin'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>entity_relationship</code> table reference
     */
    public EntityRelationship() {
        this(DSL.name("entity_relationship"), null);
    }

    /**
     * Create an aliased <code>entity_relationship</code> table reference
     */
    public EntityRelationship(String alias) {
        this(DSL.name(alias), ENTITY_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>entity_relationship</code> table reference
     */
    public EntityRelationship(Name alias) {
        this(alias, ENTITY_RELATIONSHIP);
    }

    private EntityRelationship(Name alias, Table<EntityRelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityRelationship(Name alias, Table<EntityRelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTITY_RELATIONSHIP_IDX_ENTITY_RELATIONSHIP_A, Indexes.ENTITY_RELATIONSHIP_IDX_ENTITY_RELATIONSHIP_B, Indexes.ENTITY_RELATIONSHIP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntityRelationshipRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_RELATIONSHIP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntityRelationshipRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityRelationshipRecord>>asList(Keys.KEY_ENTITY_RELATIONSHIP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityRelationship as(String alias) {
        return new EntityRelationship(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityRelationship as(Name alias) {
        return new EntityRelationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityRelationship rename(String name) {
        return new EntityRelationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityRelationship rename(Name name) {
        return new EntityRelationship(name, null);
    }
}
