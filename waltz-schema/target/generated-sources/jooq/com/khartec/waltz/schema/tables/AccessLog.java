/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.AccessLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessLog extends TableImpl<AccessLogRecord> {

    private static final long serialVersionUID = 1956575336;

    /**
     * The reference instance of <code>access_log</code>
     */
    public static final AccessLog ACCESS_LOG = new AccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessLogRecord> getRecordType() {
        return AccessLogRecord.class;
    }

    /**
     * The column <code>access_log.id</code>.
     */
    public final TableField<AccessLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>access_log.user_id</code>.
     */
    public final TableField<AccessLogRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>access_log.state</code>.
     */
    public final TableField<AccessLogRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>access_log.params</code>.
     */
    public final TableField<AccessLogRecord, String> PARAMS = createField("params", org.jooq.impl.SQLDataType.VARCHAR(1024).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>access_log.created_at</code>.
     */
    public final TableField<AccessLogRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>access_log</code> table reference
     */
    public AccessLog() {
        this(DSL.name("access_log"), null);
    }

    /**
     * Create an aliased <code>access_log</code> table reference
     */
    public AccessLog(String alias) {
        this(DSL.name(alias), ACCESS_LOG);
    }

    /**
     * Create an aliased <code>access_log</code> table reference
     */
    public AccessLog(Name alias) {
        this(alias, ACCESS_LOG);
    }

    private AccessLog(Name alias, Table<AccessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessLog(Name alias, Table<AccessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCESS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccessLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCESS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccessLogRecord> getPrimaryKey() {
        return Keys.KEY_ACCESS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccessLogRecord>> getKeys() {
        return Arrays.<UniqueKey<AccessLogRecord>>asList(Keys.KEY_ACCESS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessLog as(String alias) {
        return new AccessLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessLog as(Name alias) {
        return new AccessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessLog rename(String name) {
        return new AccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessLog rename(Name name) {
        return new AccessLog(name, null);
    }
}
