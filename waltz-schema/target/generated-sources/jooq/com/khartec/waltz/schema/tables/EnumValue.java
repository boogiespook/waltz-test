/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.EnumValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Store enum values - display names, descriptions and icon names
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnumValue extends TableImpl<EnumValueRecord> {

    private static final long serialVersionUID = -1599114341;

    /**
     * The reference instance of <code>enum_value</code>
     */
    public static final EnumValue ENUM_VALUE = new EnumValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnumValueRecord> getRecordType() {
        return EnumValueRecord.class;
    }

    /**
     * The column <code>enum_value.type</code>.
     */
    public final TableField<EnumValueRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>enum_value.key</code>.
     */
    public final TableField<EnumValueRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>enum_value.display_name</code>.
     */
    public final TableField<EnumValueRecord, String> DISPLAY_NAME = createField("display_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>enum_value.description</code>.
     */
    public final TableField<EnumValueRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>enum_value.icon_name</code>. The default value fw, stands for fixed-width which acts like a spacer icon
     */
    public final TableField<EnumValueRecord, String> ICON_NAME = createField("icon_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'fw'", org.jooq.impl.SQLDataType.VARCHAR)), this, "The default value fw, stands for fixed-width which acts like a spacer icon");

    /**
     * The column <code>enum_value.position</code>.
     */
    public final TableField<EnumValueRecord, Integer> POSITION = createField("position", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>enum_value</code> table reference
     */
    public EnumValue() {
        this(DSL.name("enum_value"), null);
    }

    /**
     * Create an aliased <code>enum_value</code> table reference
     */
    public EnumValue(String alias) {
        this(DSL.name(alias), ENUM_VALUE);
    }

    /**
     * Create an aliased <code>enum_value</code> table reference
     */
    public EnumValue(Name alias) {
        this(alias, ENUM_VALUE);
    }

    private EnumValue(Name alias, Table<EnumValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private EnumValue(Name alias, Table<EnumValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Store enum values - display names, descriptions and icon names");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENUM_VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EnumValueRecord> getPrimaryKey() {
        return Keys.KEY_ENUM_VALUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EnumValueRecord>> getKeys() {
        return Arrays.<UniqueKey<EnumValueRecord>>asList(Keys.KEY_ENUM_VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnumValue as(String alias) {
        return new EnumValue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnumValue as(Name alias) {
        return new EnumValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumValue rename(String name) {
        return new EnumValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumValue rename(Name name) {
        return new EnumValue(name, null);
    }
}
