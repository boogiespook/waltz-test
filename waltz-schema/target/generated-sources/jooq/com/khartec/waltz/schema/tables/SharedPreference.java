/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.SharedPreferenceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Store shared preference values
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SharedPreference extends TableImpl<SharedPreferenceRecord> {

    private static final long serialVersionUID = -570205303;

    /**
     * The reference instance of <code>shared_preference</code>
     */
    public static final SharedPreference SHARED_PREFERENCE = new SharedPreference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SharedPreferenceRecord> getRecordType() {
        return SharedPreferenceRecord.class;
    }

    /**
     * The column <code>shared_preference.key</code>.
     */
    public final TableField<SharedPreferenceRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>shared_preference.category</code>.
     */
    public final TableField<SharedPreferenceRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>shared_preference.value</code>.
     */
    public final TableField<SharedPreferenceRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>shared_preference.last_updated_at</code>.
     */
    public final TableField<SharedPreferenceRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>shared_preference.last_updated_by</code>.
     */
    public final TableField<SharedPreferenceRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>shared_preference</code> table reference
     */
    public SharedPreference() {
        this(DSL.name("shared_preference"), null);
    }

    /**
     * Create an aliased <code>shared_preference</code> table reference
     */
    public SharedPreference(String alias) {
        this(DSL.name(alias), SHARED_PREFERENCE);
    }

    /**
     * Create an aliased <code>shared_preference</code> table reference
     */
    public SharedPreference(Name alias) {
        this(alias, SHARED_PREFERENCE);
    }

    private SharedPreference(Name alias, Table<SharedPreferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SharedPreference(Name alias, Table<SharedPreferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Store shared preference values");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHARED_PREFERENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SharedPreferenceRecord> getPrimaryKey() {
        return Keys.KEY_SHARED_PREFERENCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SharedPreferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<SharedPreferenceRecord>>asList(Keys.KEY_SHARED_PREFERENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedPreference as(String alias) {
        return new SharedPreference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedPreference as(Name alias) {
        return new SharedPreference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedPreference rename(String name) {
        return new SharedPreference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedPreference rename(Name name) {
        return new SharedPreference(name, null);
    }
}
