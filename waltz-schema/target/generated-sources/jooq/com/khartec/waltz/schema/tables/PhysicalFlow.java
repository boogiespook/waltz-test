/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.PhysicalFlowRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhysicalFlow extends TableImpl<PhysicalFlowRecord> {

    private static final long serialVersionUID = -122860109;

    /**
     * The reference instance of <code>physical_flow</code>
     */
    public static final PhysicalFlow PHYSICAL_FLOW = new PhysicalFlow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhysicalFlowRecord> getRecordType() {
        return PhysicalFlowRecord.class;
    }

    /**
     * The column <code>physical_flow.id</code>.
     */
    public final TableField<PhysicalFlowRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>physical_flow.specification_id</code>.
     */
    public final TableField<PhysicalFlowRecord, Long> SPECIFICATION_ID = createField("specification_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>physical_flow.basis_offset</code>.
     */
    public final TableField<PhysicalFlowRecord, Integer> BASIS_OFFSET = createField("basis_offset", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>physical_flow.frequency</code>.
     */
    public final TableField<PhysicalFlowRecord, String> FREQUENCY = createField("frequency", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>physical_flow.transport</code>.
     */
    public final TableField<PhysicalFlowRecord, String> TRANSPORT = createField("transport", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>physical_flow.description</code>.
     */
    public final TableField<PhysicalFlowRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>physical_flow.provenance</code>.
     */
    public final TableField<PhysicalFlowRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>physical_flow.last_updated_at</code>.
     */
    public final TableField<PhysicalFlowRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>physical_flow.last_updated_by</code>.
     */
    public final TableField<PhysicalFlowRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>physical_flow.logical_flow_id</code>.
     */
    public final TableField<PhysicalFlowRecord, Long> LOGICAL_FLOW_ID = createField("logical_flow_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>physical_flow.specification_definition_id</code>.
     */
    public final TableField<PhysicalFlowRecord, Long> SPECIFICATION_DEFINITION_ID = createField("specification_definition_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>physical_flow.is_removed</code>.
     */
    public final TableField<PhysicalFlowRecord, Boolean> IS_REMOVED = createField("is_removed", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>physical_flow.last_attested_at</code>.
     */
    public final TableField<PhysicalFlowRecord, Timestamp> LAST_ATTESTED_AT = createField("last_attested_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>physical_flow.last_attested_by</code>.
     */
    public final TableField<PhysicalFlowRecord, String> LAST_ATTESTED_BY = createField("last_attested_by", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>physical_flow.criticality</code>.
     */
    public final TableField<PhysicalFlowRecord, String> CRITICALITY = createField("criticality", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'MEDIUM'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>physical_flow.external_id</code>.
     */
    public final TableField<PhysicalFlowRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>physical_flow</code> table reference
     */
    public PhysicalFlow() {
        this(DSL.name("physical_flow"), null);
    }

    /**
     * Create an aliased <code>physical_flow</code> table reference
     */
    public PhysicalFlow(String alias) {
        this(DSL.name(alias), PHYSICAL_FLOW);
    }

    /**
     * Create an aliased <code>physical_flow</code> table reference
     */
    public PhysicalFlow(Name alias) {
        this(alias, PHYSICAL_FLOW);
    }

    private PhysicalFlow(Name alias, Table<PhysicalFlowRecord> aliased) {
        this(alias, aliased, null);
    }

    private PhysicalFlow(Name alias, Table<PhysicalFlowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHYSICAL_FLOW_IDX_ARTICLE_ID, Indexes.PHYSICAL_FLOW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PhysicalFlowRecord, Long> getIdentity() {
        return Keys.IDENTITY_PHYSICAL_FLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhysicalFlowRecord> getPrimaryKey() {
        return Keys.KEY_PHYSICAL_FLOW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhysicalFlowRecord>> getKeys() {
        return Arrays.<UniqueKey<PhysicalFlowRecord>>asList(Keys.KEY_PHYSICAL_FLOW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhysicalFlow as(String alias) {
        return new PhysicalFlow(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhysicalFlow as(Name alias) {
        return new PhysicalFlow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PhysicalFlow rename(String name) {
        return new PhysicalFlow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhysicalFlow rename(Name name) {
        return new PhysicalFlow(name, null);
    }
}
