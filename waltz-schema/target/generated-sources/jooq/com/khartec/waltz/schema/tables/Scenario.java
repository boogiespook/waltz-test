/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.ScenarioRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scenario extends TableImpl<ScenarioRecord> {

    private static final long serialVersionUID = -1103863401;

    /**
     * The reference instance of <code>scenario</code>
     */
    public static final Scenario SCENARIO = new Scenario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioRecord> getRecordType() {
        return ScenarioRecord.class;
    }

    /**
     * The column <code>scenario.id</code>.
     */
    public final TableField<ScenarioRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>scenario.name</code>.
     */
    public final TableField<ScenarioRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scenario.description</code>.
     */
    public final TableField<ScenarioRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>scenario.lifecycle_status</code>.
     */
    public final TableField<ScenarioRecord, String> LIFECYCLE_STATUS = createField("lifecycle_status", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>scenario.roadmap_id</code>.
     */
    public final TableField<ScenarioRecord, Long> ROADMAP_ID = createField("roadmap_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scenario.last_updated_at</code>.
     */
    public final TableField<ScenarioRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>scenario.last_updated_by</code>.
     */
    public final TableField<ScenarioRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scenario.effective_date</code>.
     */
    public final TableField<ScenarioRecord, Date> EFFECTIVE_DATE = createField("effective_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>scenario.scenario_type</code>.
     */
    public final TableField<ScenarioRecord, String> SCENARIO_TYPE = createField("scenario_type", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>scenario.release_status</code>.
     */
    public final TableField<ScenarioRecord, String> RELEASE_STATUS = createField("release_status", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>scenario</code> table reference
     */
    public Scenario() {
        this(DSL.name("scenario"), null);
    }

    /**
     * Create an aliased <code>scenario</code> table reference
     */
    public Scenario(String alias) {
        this(DSL.name(alias), SCENARIO);
    }

    /**
     * Create an aliased <code>scenario</code> table reference
     */
    public Scenario(Name alias) {
        this(alias, SCENARIO);
    }

    private Scenario(Name alias, Table<ScenarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scenario(Name alias, Table<ScenarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCENARIO_IDX_SCENARIO_ROADMAP_ID, Indexes.SCENARIO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ScenarioRecord, Long> getIdentity() {
        return Keys.IDENTITY_SCENARIO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ScenarioRecord> getPrimaryKey() {
        return Keys.KEY_SCENARIO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ScenarioRecord>> getKeys() {
        return Arrays.<UniqueKey<ScenarioRecord>>asList(Keys.KEY_SCENARIO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scenario as(String alias) {
        return new Scenario(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scenario as(Name alias) {
        return new Scenario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenario rename(String name) {
        return new Scenario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenario rename(Name name) {
        return new Scenario(name, null);
    }
}
