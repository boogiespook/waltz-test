/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.PerspectiveDefinitionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerspectiveDefinition extends TableImpl<PerspectiveDefinitionRecord> {

    private static final long serialVersionUID = 335565765;

    /**
     * The reference instance of <code>perspective_definition</code>
     */
    public static final PerspectiveDefinition PERSPECTIVE_DEFINITION = new PerspectiveDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerspectiveDefinitionRecord> getRecordType() {
        return PerspectiveDefinitionRecord.class;
    }

    /**
     * The column <code>perspective_definition.id</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>perspective_definition.name</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>perspective_definition.description</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>perspective_definition.category_x</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, Long> CATEGORY_X = createField("category_x", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>perspective_definition.category_y</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, Long> CATEGORY_Y = createField("category_y", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>perspective_definition.rating_scheme_id</code>.
     */
    public final TableField<PerspectiveDefinitionRecord, Long> RATING_SCHEME_ID = createField("rating_scheme_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>perspective_definition</code> table reference
     */
    public PerspectiveDefinition() {
        this(DSL.name("perspective_definition"), null);
    }

    /**
     * Create an aliased <code>perspective_definition</code> table reference
     */
    public PerspectiveDefinition(String alias) {
        this(DSL.name(alias), PERSPECTIVE_DEFINITION);
    }

    /**
     * Create an aliased <code>perspective_definition</code> table reference
     */
    public PerspectiveDefinition(Name alias) {
        this(alias, PERSPECTIVE_DEFINITION);
    }

    private PerspectiveDefinition(Name alias, Table<PerspectiveDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PerspectiveDefinition(Name alias, Table<PerspectiveDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSPECTIVE_DEFINITION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PerspectiveDefinitionRecord, Long> getIdentity() {
        return Keys.IDENTITY_PERSPECTIVE_DEFINITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PerspectiveDefinitionRecord> getPrimaryKey() {
        return Keys.KEY_PERSPECTIVE_DEFINITION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PerspectiveDefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<PerspectiveDefinitionRecord>>asList(Keys.KEY_PERSPECTIVE_DEFINITION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerspectiveDefinition as(String alias) {
        return new PerspectiveDefinition(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerspectiveDefinition as(Name alias) {
        return new PerspectiveDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerspectiveDefinition rename(String name) {
        return new PerspectiveDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerspectiveDefinition rename(Name name) {
        return new PerspectiveDefinition(name, null);
    }
}
