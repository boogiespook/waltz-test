/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.LogicalDataElementRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogicalDataElement extends TableImpl<LogicalDataElementRecord> {

    private static final long serialVersionUID = -1282211931;

    /**
     * The reference instance of <code>logical_data_element</code>
     */
    public static final LogicalDataElement LOGICAL_DATA_ELEMENT = new LogicalDataElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogicalDataElementRecord> getRecordType() {
        return LogicalDataElementRecord.class;
    }

    /**
     * The column <code>logical_data_element.id</code>.
     */
    public final TableField<LogicalDataElementRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>logical_data_element.external_id</code>.
     */
    public final TableField<LogicalDataElementRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>logical_data_element.name</code>.
     */
    public final TableField<LogicalDataElementRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>logical_data_element.description</code>.
     */
    public final TableField<LogicalDataElementRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>logical_data_element.type</code>.
     */
    public final TableField<LogicalDataElementRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>logical_data_element.provenance</code>.
     */
    public final TableField<LogicalDataElementRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>logical_data_element.entity_lifecycle_status</code>.
     */
    public final TableField<LogicalDataElementRecord, String> ENTITY_LIFECYCLE_STATUS = createField("entity_lifecycle_status", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>logical_data_element</code> table reference
     */
    public LogicalDataElement() {
        this(DSL.name("logical_data_element"), null);
    }

    /**
     * Create an aliased <code>logical_data_element</code> table reference
     */
    public LogicalDataElement(String alias) {
        this(DSL.name(alias), LOGICAL_DATA_ELEMENT);
    }

    /**
     * Create an aliased <code>logical_data_element</code> table reference
     */
    public LogicalDataElement(Name alias) {
        this(alias, LOGICAL_DATA_ELEMENT);
    }

    private LogicalDataElement(Name alias, Table<LogicalDataElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogicalDataElement(Name alias, Table<LogicalDataElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGICAL_DATA_ELEMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogicalDataElementRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOGICAL_DATA_ELEMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogicalDataElementRecord> getPrimaryKey() {
        return Keys.KEY_LOGICAL_DATA_ELEMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogicalDataElementRecord>> getKeys() {
        return Arrays.<UniqueKey<LogicalDataElementRecord>>asList(Keys.KEY_LOGICAL_DATA_ELEMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalDataElement as(String alias) {
        return new LogicalDataElement(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalDataElement as(Name alias) {
        return new LogicalDataElement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogicalDataElement rename(String name) {
        return new LogicalDataElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogicalDataElement rename(Name name) {
        return new LogicalDataElement(name, null);
    }
}
