/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.DatabaseInformationRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabaseInformation extends TableImpl<DatabaseInformationRecord> {

    private static final long serialVersionUID = 1940665306;

    /**
     * The reference instance of <code>database_information</code>
     */
    public static final DatabaseInformation DATABASE_INFORMATION = new DatabaseInformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatabaseInformationRecord> getRecordType() {
        return DatabaseInformationRecord.class;
    }

    /**
     * The column <code>database_information.id</code>.
     */
    public final TableField<DatabaseInformationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>database_information.database_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DATABASE_NAME = createField("database_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.instance_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> INSTANCE_NAME = createField("instance_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.environment</code>.
     */
    public final TableField<DatabaseInformationRecord, String> ENVIRONMENT = createField("environment", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.dbms_vendor</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_VENDOR = createField("dbms_vendor", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>database_information.dbms_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_NAME = createField("dbms_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>database_information.dbms_version</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_VERSION = createField("dbms_version", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>database_information.external_id</code>.
     */
    public final TableField<DatabaseInformationRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.provenance</code>.
     */
    public final TableField<DatabaseInformationRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.end_of_life_date</code>.
     */
    public final TableField<DatabaseInformationRecord, Date> END_OF_LIFE_DATE = createField("end_of_life_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>database_information.asset_code</code>.
     */
    public final TableField<DatabaseInformationRecord, String> ASSET_CODE = createField("asset_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("'UNKNOWN'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.lifecycle_status</code>.
     */
    public final TableField<DatabaseInformationRecord, String> LIFECYCLE_STATUS = createField("lifecycle_status", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'UNKNOWN'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>database_information</code> table reference
     */
    public DatabaseInformation() {
        this(DSL.name("database_information"), null);
    }

    /**
     * Create an aliased <code>database_information</code> table reference
     */
    public DatabaseInformation(String alias) {
        this(DSL.name(alias), DATABASE_INFORMATION);
    }

    /**
     * Create an aliased <code>database_information</code> table reference
     */
    public DatabaseInformation(Name alias) {
        this(alias, DATABASE_INFORMATION);
    }

    private DatabaseInformation(Name alias, Table<DatabaseInformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatabaseInformation(Name alias, Table<DatabaseInformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATABASE_INFORMATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DatabaseInformationRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATABASE_INFORMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatabaseInformationRecord> getPrimaryKey() {
        return Keys.KEY_DATABASE_INFORMATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatabaseInformationRecord>> getKeys() {
        return Arrays.<UniqueKey<DatabaseInformationRecord>>asList(Keys.KEY_DATABASE_INFORMATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseInformation as(String alias) {
        return new DatabaseInformation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseInformation as(Name alias) {
        return new DatabaseInformation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseInformation rename(String name) {
        return new DatabaseInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseInformation rename(Name name) {
        return new DatabaseInformation(name, null);
    }
}
