/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.PhysicalSpecificationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhysicalSpecification extends TableImpl<PhysicalSpecificationRecord> {

    private static final long serialVersionUID = 2080499914;

    /**
     * The reference instance of <code>physical_specification</code>
     */
    public static final PhysicalSpecification PHYSICAL_SPECIFICATION = new PhysicalSpecification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhysicalSpecificationRecord> getRecordType() {
        return PhysicalSpecificationRecord.class;
    }

    /**
     * The column <code>physical_specification.id</code>.
     */
    public final TableField<PhysicalSpecificationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>physical_specification.owning_entity_id</code>.
     */
    public final TableField<PhysicalSpecificationRecord, Long> OWNING_ENTITY_ID = createField("owning_entity_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>physical_specification.external_id</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>physical_specification.name</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>physical_specification.format</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>physical_specification.description</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>physical_specification.provenance</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>physical_specification.owning_entity_kind</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> OWNING_ENTITY_KIND = createField("owning_entity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'APPLICATION'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>physical_specification.last_updated_at</code>.
     */
    public final TableField<PhysicalSpecificationRecord, Timestamp> LAST_UPDATED_AT = createField("last_updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>physical_specification.last_updated_by</code>.
     */
    public final TableField<PhysicalSpecificationRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>physical_specification.is_removed</code>.
     */
    public final TableField<PhysicalSpecificationRecord, Boolean> IS_REMOVED = createField("is_removed", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>physical_specification</code> table reference
     */
    public PhysicalSpecification() {
        this(DSL.name("physical_specification"), null);
    }

    /**
     * Create an aliased <code>physical_specification</code> table reference
     */
    public PhysicalSpecification(String alias) {
        this(DSL.name(alias), PHYSICAL_SPECIFICATION);
    }

    /**
     * Create an aliased <code>physical_specification</code> table reference
     */
    public PhysicalSpecification(Name alias) {
        this(alias, PHYSICAL_SPECIFICATION);
    }

    private PhysicalSpecification(Name alias, Table<PhysicalSpecificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PhysicalSpecification(Name alias, Table<PhysicalSpecificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHYSICAL_SPECIFICATION_IDX_OWNING_ENTITY, Indexes.PHYSICAL_SPECIFICATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PhysicalSpecificationRecord, Long> getIdentity() {
        return Keys.IDENTITY_PHYSICAL_SPECIFICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhysicalSpecificationRecord> getPrimaryKey() {
        return Keys.KEY_PHYSICAL_SPECIFICATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhysicalSpecificationRecord>> getKeys() {
        return Arrays.<UniqueKey<PhysicalSpecificationRecord>>asList(Keys.KEY_PHYSICAL_SPECIFICATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhysicalSpecification as(String alias) {
        return new PhysicalSpecification(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhysicalSpecification as(Name alias) {
        return new PhysicalSpecification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PhysicalSpecification rename(String name) {
        return new PhysicalSpecification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhysicalSpecification rename(Name name) {
        return new PhysicalSpecification(name, null);
    }
}
