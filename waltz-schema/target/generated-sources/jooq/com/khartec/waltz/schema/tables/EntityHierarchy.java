/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.tables.records.EntityHierarchyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Generic Hierarchy table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityHierarchy extends TableImpl<EntityHierarchyRecord> {

    private static final long serialVersionUID = 170894566;

    /**
     * The reference instance of <code>entity_hierarchy</code>
     */
    public static final EntityHierarchy ENTITY_HIERARCHY = new EntityHierarchy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityHierarchyRecord> getRecordType() {
        return EntityHierarchyRecord.class;
    }

    /**
     * The column <code>entity_hierarchy.kind</code>. Entity kind
     */
    public final TableField<EntityHierarchyRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "Entity kind");

    /**
     * The column <code>entity_hierarchy.id</code>.
     */
    public final TableField<EntityHierarchyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>entity_hierarchy.ancestor_id</code>.
     */
    public final TableField<EntityHierarchyRecord, Long> ANCESTOR_ID = createField("ancestor_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>entity_hierarchy.level</code>.
     */
    public final TableField<EntityHierarchyRecord, Integer> LEVEL = createField("level", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>entity_hierarchy</code> table reference
     */
    public EntityHierarchy() {
        this(DSL.name("entity_hierarchy"), null);
    }

    /**
     * Create an aliased <code>entity_hierarchy</code> table reference
     */
    public EntityHierarchy(String alias) {
        this(DSL.name(alias), ENTITY_HIERARCHY);
    }

    /**
     * Create an aliased <code>entity_hierarchy</code> table reference
     */
    public EntityHierarchy(Name alias) {
        this(alias, ENTITY_HIERARCHY);
    }

    private EntityHierarchy(Name alias, Table<EntityHierarchyRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityHierarchy(Name alias, Table<EntityHierarchyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Generic Hierarchy table");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTITY_HIERARCHY_IDX_ENTITY_HIER_KIND_ANCESTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityHierarchy as(String alias) {
        return new EntityHierarchy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityHierarchy as(Name alias) {
        return new EntityHierarchy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityHierarchy rename(String name) {
        return new EntityHierarchy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityHierarchy rename(Name name) {
        return new EntityHierarchy(name, null);
    }
}
