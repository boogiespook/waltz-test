/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.ComplexityScoreRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComplexityScore extends TableImpl<ComplexityScoreRecord> {

    private static final long serialVersionUID = 1601622202;

    /**
     * The reference instance of <code>complexity_score</code>
     */
    public static final ComplexityScore COMPLEXITY_SCORE = new ComplexityScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplexityScoreRecord> getRecordType() {
        return ComplexityScoreRecord.class;
    }

    /**
     * The column <code>complexity_score.entity_kind</code>.
     */
    public final TableField<ComplexityScoreRecord, String> ENTITY_KIND = createField("entity_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>complexity_score.entity_id</code>.
     */
    public final TableField<ComplexityScoreRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>complexity_score.complexity_kind</code>.
     */
    public final TableField<ComplexityScoreRecord, String> COMPLEXITY_KIND = createField("complexity_kind", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>complexity_score.score</code>.
     */
    public final TableField<ComplexityScoreRecord, BigDecimal> SCORE = createField("score", org.jooq.impl.SQLDataType.DECIMAL(10, 3).nullable(false), this, "");

    /**
     * Create a <code>complexity_score</code> table reference
     */
    public ComplexityScore() {
        this(DSL.name("complexity_score"), null);
    }

    /**
     * Create an aliased <code>complexity_score</code> table reference
     */
    public ComplexityScore(String alias) {
        this(DSL.name(alias), COMPLEXITY_SCORE);
    }

    /**
     * Create an aliased <code>complexity_score</code> table reference
     */
    public ComplexityScore(Name alias) {
        this(alias, COMPLEXITY_SCORE);
    }

    private ComplexityScore(Name alias, Table<ComplexityScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComplexityScore(Name alias, Table<ComplexityScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPLEXITY_SCORE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ComplexityScoreRecord> getPrimaryKey() {
        return Keys.KEY_COMPLEXITY_SCORE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ComplexityScoreRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplexityScoreRecord>>asList(Keys.KEY_COMPLEXITY_SCORE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComplexityScore as(String alias) {
        return new ComplexityScore(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComplexityScore as(Name alias) {
        return new ComplexityScore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplexityScore rename(String name) {
        return new ComplexityScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplexityScore rename(Name name) {
        return new ComplexityScore(name, null);
    }
}
