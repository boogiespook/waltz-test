/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.BookmarkRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookmark extends TableImpl<BookmarkRecord> {

    private static final long serialVersionUID = 1086649878;

    /**
     * The reference instance of <code>bookmark</code>
     */
    public static final Bookmark BOOKMARK = new Bookmark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarkRecord> getRecordType() {
        return BookmarkRecord.class;
    }

    /**
     * The column <code>bookmark.id</code>.
     */
    public final TableField<BookmarkRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bookmark.title</code>.
     */
    public final TableField<BookmarkRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bookmark.description</code>.
     */
    public final TableField<BookmarkRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>bookmark.kind</code>.
     */
    public final TableField<BookmarkRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bookmark.url</code>.
     */
    public final TableField<BookmarkRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bookmark.parent_kind</code>.
     */
    public final TableField<BookmarkRecord, String> PARENT_KIND = createField("parent_kind", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bookmark.parent_id</code>.
     */
    public final TableField<BookmarkRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>bookmark.created_at</code>.
     */
    public final TableField<BookmarkRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>bookmark.updated_at</code>.
     */
    public final TableField<BookmarkRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0000-00-00 00:00:00'", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>bookmark.is_primary</code>.
     */
    public final TableField<BookmarkRecord, Boolean> IS_PRIMARY = createField("is_primary", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>bookmark.provenance</code>.
     */
    public final TableField<BookmarkRecord, String> PROVENANCE = createField("provenance", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'waltz'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bookmark.last_updated_by</code>.
     */
    public final TableField<BookmarkRecord, String> LAST_UPDATED_BY = createField("last_updated_by", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookmark.is_required</code>.
     */
    public final TableField<BookmarkRecord, Boolean> IS_REQUIRED = createField("is_required", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>bookmark</code> table reference
     */
    public Bookmark() {
        this(DSL.name("bookmark"), null);
    }

    /**
     * Create an aliased <code>bookmark</code> table reference
     */
    public Bookmark(String alias) {
        this(DSL.name(alias), BOOKMARK);
    }

    /**
     * Create an aliased <code>bookmark</code> table reference
     */
    public Bookmark(Name alias) {
        this(alias, BOOKMARK);
    }

    private Bookmark(Name alias, Table<BookmarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bookmark(Name alias, Table<BookmarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOOKMARK_IDX_BOOKMARK_PARENT, Indexes.BOOKMARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BookmarkRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOOKMARK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookmarkRecord> getPrimaryKey() {
        return Keys.KEY_BOOKMARK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookmarkRecord>> getKeys() {
        return Arrays.<UniqueKey<BookmarkRecord>>asList(Keys.KEY_BOOKMARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bookmark as(String alias) {
        return new Bookmark(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bookmark as(Name alias) {
        return new Bookmark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(String name) {
        return new Bookmark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(Name name) {
        return new Bookmark(name, null);
    }
}
