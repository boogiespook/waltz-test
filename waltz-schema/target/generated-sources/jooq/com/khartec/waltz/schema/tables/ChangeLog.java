/*
 * This file is generated by jOOQ.
*/
package com.khartec.waltz.schema.tables;


import com.khartec.waltz.schema.DefaultSchema;
import com.khartec.waltz.schema.Indexes;
import com.khartec.waltz.schema.Keys;
import com.khartec.waltz.schema.tables.records.ChangeLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChangeLog extends TableImpl<ChangeLogRecord> {

    private static final long serialVersionUID = -580339425;

    /**
     * The reference instance of <code>change_log</code>
     */
    public static final ChangeLog CHANGE_LOG = new ChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangeLogRecord> getRecordType() {
        return ChangeLogRecord.class;
    }

    /**
     * The column <code>change_log.id</code>.
     */
    public final TableField<ChangeLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>change_log.parent_kind</code>.
     */
    public final TableField<ChangeLogRecord, String> PARENT_KIND = createField("parent_kind", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>change_log.parent_id</code>.
     */
    public final TableField<ChangeLogRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>change_log.message</code>.
     */
    public final TableField<ChangeLogRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>change_log.user_id</code>.
     */
    public final TableField<ChangeLogRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>change_log.severity</code>.
     */
    public final TableField<ChangeLogRecord, String> SEVERITY = createField("severity", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>change_log.created_at</code>.
     */
    public final TableField<ChangeLogRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>change_log.child_kind</code>.
     */
    public final TableField<ChangeLogRecord, String> CHILD_KIND = createField("child_kind", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>change_log.operation</code>.
     */
    public final TableField<ChangeLogRecord, String> OPERATION = createField("operation", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'UNKNOWN'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>change_log</code> table reference
     */
    public ChangeLog() {
        this(DSL.name("change_log"), null);
    }

    /**
     * Create an aliased <code>change_log</code> table reference
     */
    public ChangeLog(String alias) {
        this(DSL.name(alias), CHANGE_LOG);
    }

    /**
     * Create an aliased <code>change_log</code> table reference
     */
    public ChangeLog(Name alias) {
        this(alias, CHANGE_LOG);
    }

    private ChangeLog(Name alias, Table<ChangeLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChangeLog(Name alias, Table<ChangeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHANGE_LOG_IDX_CHANGE_LOG_USER_ID, Indexes.CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChangeLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CHANGE_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChangeLogRecord> getPrimaryKey() {
        return Keys.KEY_CHANGE_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChangeLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ChangeLogRecord>>asList(Keys.KEY_CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChangeLog as(String alias) {
        return new ChangeLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChangeLog as(Name alias) {
        return new ChangeLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeLog rename(String name) {
        return new ChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeLog rename(Name name) {
        return new ChangeLog(name, null);
    }
}
